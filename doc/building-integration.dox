/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page building-integration Downloading and building integration libraries
@brief Guide how to download and build integration libraries for Magnum engine.

@tableofcontents

Integration repository provides integration of various math and physics
libraries with Magnum engine. This is not needed for essential usage, but it
might get handy if you want to use something other than builtin components and
seamlessly integrate them with the rest of the engine.

The source is available on GitHub: https://github.com/mosra/magnum-integration.
Building integration libraries is very similar to building Magnum itself. See
@ref building for additonal information about building and running tests,
crosscompiling and platform-specific issues.

Similarly to Magnum, the libraries are build as shared by default. If you are
developing for platform which doesn't support shared libraries or if you just
want to link them statically, enable `BUILD_STATIC` to build the libraries as
static. If you plan to use them with shared libraries later, enable also
position-independent code with `BUILD_STATIC_PIC`.

Libraries built in `Debug` configuration (e.g. with `CMAKE_BUILD_TYPE` set
to `Debug`) have `-d` suffix, similarly to what is done when
@ref building "building Magnum itself".

By default no integration libraries are built and you need to select them
manually:

-   `WITH_BULLET` -- @ref BulletIntegration "BulletIntegration" library.
-   `WITH_OVR` -- @ref OvrIntegration "OvrIntegration" library.

Note that [each <tt>*Integration</tt> namespace](namespaces.html) contains more
detailed information about dependencies, availability on particular platform
and also guide how to enable given library in build and use it with CMake.

@section building-integration-arch Building ArchLinux packages

In `package/archlinux` directory is currently one package for Git development
build. The package is also in AUR under the same name.

There are also a few development PKGBUILDs in `package/archlinux`, which allow
you to build and install the package directly from source tree without
downloading anything. The native PKGBUILDs also contain `check()` function
which will run all unit tests before packaging.

@section building-integration-gentoo Gentoo ebuilds

Gentoo Git ebuild is available in `package/gentoo` directory.

@section building-integration-deb Building DEB packages

There is also `package/debian/` directory with all files needed for building
Debian packages. You need to have `corrade-dev` DEB packages installed and in
addition also `dpkg-dev` package. Building is easy, just change directory to
package root, copy `package/debian` directory there and run `dpkg-buildpackage`:

    cp -r package/debian .
    dpkg-buildpackage

This will compile binary and development packages, which will then appear in
parent directory. If you need to modify CMake flags (enabling/disabling some
libraries, for example), modify the last entry in `debian/rules`.

@section building-integration-ci Continuous Integration

@subsection building-integration-ci-travis Travis

In `package/ci/` there is `travis.yml` file with Linux GCC 4.7 and OSX Clang
configuration. Online at https://travis-ci.org/mosra/magnum-integration.

@subsection building-integration-ci-appveyor AppVeyor

In `package/ci/` there is `appveyor.yml` file with Windows MSVC configuration.
Online at https://ci.appveyor.com/project/mosra/magnum-integration.

@subsection building-integration-ci-jenkins Jenkins

In `package/ci/` there is `jenkins.xml` file containing job configuration.
Setup your Jenkins server, enable the **Git** and **Text-finder** plugin and
download the CLI application from here (replace `localhost:8080` with your
server name):

    http://localhost:8080/cli

Then add new job or update existing one (update path to the `*.jar` file,
replace `localhost:8080` with your server name, replace `update-job` with
`create-job` if the job doesn't exist yet).

    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job MagnumIntegration < package/ci/jenkins.xml

Build is done using **Ninja** build system and everything possible is enabled,
thus you need also **Bullet** libraries. It expects that **GCC** >= 4.9, 4.8,
4.7 and **Clang** are installed and there are **OpenGL**, **OpenGL ES 2.0**
and **OpenGL ES 3.0** librares as it tries to compile the library with every
combination of them. You can add/remove the axes in `axes/hudson.matrix.TextAxis`
or via the web interface later.

There is also MinGW-w64, Emscripten and NaCl configuration, add or update them
with the commands below. See @ref building-crosscompiling for more information
about setting up the crosscompilers and `toolchains/` submodule. For Emscripten
you need also **Node.js** installed to run the tests.

    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job MagnumIntegration-MinGW-w64 < package/ci/jenkins-mingw-w64.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job MagnumIntegration-Emscripten < package/ci/jenkins-emscripten.xml
    java -jar ~/jenkins-cli.jar -s http://localhost:8080 update-job MagnumIntegration-NaCl < package/ci/jenkins-nacl.xml

*/
}
